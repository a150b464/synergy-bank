package com.synergy.bank.customer.web.controller;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.support.ByteArrayMultipartFileEditor;

import com.synergy.bank.common.service.BankEmailService;
import com.synergy.bank.common.service.impl.EmailSenderThread;
import com.synergy.bank.common.web.controller.form.LoginForm;
import com.synergy.bank.customer.service.BankCustomerService;
import com.synergy.bank.customer.service.CustomerAccountService;
import com.synergy.bank.customer.web.constant.NavigationConstant;
import com.synergy.bank.customer.web.controller.form.CustomerAccountForm;
import com.synergy.bank.customer.web.controller.form.CustomerForm;
import com.synergy.bank.customer.web.controller.form.PayeeDetailsForm;

@Controller
public class BankCustomerController {

	@Autowired
	@Qualifier("BankCustomerServiceImpl")
	private BankCustomerService bankCustomerService;
	// private BankAuthService bankAuthService;

	@Autowired
	@Qualifier("BankEmailServiceImpl")
	private BankEmailService bankEmailService;

	@Autowired
	@Qualifier("CustomerAccountServiceImpl")
	private CustomerAccountService customerAccountService;

	@RequestMapping(value = "customerRegistration", method = RequestMethod.GET)
	public String showCustomerRegistrationPage(Model model) {
		CustomerForm customerForm = new CustomerForm();
		model.addAttribute("customerForm", customerForm);
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.CUSTOMER_REGISTRATION_PAGE;
	}

	@RequestMapping(value = "/customerRegistration", method = RequestMethod.POST)
	public String showCustomerRegistrationSubmit(
			@ModelAttribute(value = "customerForm") CustomerForm customerForm) {
		String useridAndPassword = bankCustomerService
				.addCustomer(customerForm);
		// bankCustomerService.addCustomerDetails(customerForm);
		// here we are making this call asynchronous so we are creating
		String uptokens[] = useridAndPassword.split("-");
		EmailSenderThread emailSenderThread = new EmailSenderThread(
				bankEmailService, customerForm.getEmail(), "Your user id is: "
						+ uptokens[0] + "\nAnd password is: " + uptokens[1],
				"Regarding Registration");
		emailSenderThread.start();
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.CUSTOMER_REGISTRATION_PAGE;
	}

	@RequestMapping(value = "showPayeeList", method = RequestMethod.GET)
	public String showPayeeList(Model model, HttpSession session) {
		LoginForm loginForm = (LoginForm) session
				.getAttribute(NavigationConstant.USER_SESSION_DATA);
		String userId = loginForm.getUserId();
		List<PayeeDetailsForm> payeeList = bankCustomerService
				.showPayeeListByUserId(userId);
		model.addAttribute("payeeDetailsList", payeeList);
		System.out.println(payeeList);
		// return "customer/payeeList";
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.CUSTOMER_PAYEE_LIST_PAGE;
	}

	@RequestMapping(value = "/editRegistration", method = RequestMethod.GET)
	public String editRegistration(@RequestParam("userId") String userId,
			Model model) {
		CustomerForm customerForm = bankCustomerService
				.findCustomerByUserId(userId);
		model.addAttribute("customerForm", customerForm);
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.CUSTOMER_REGISTRATION_PAGE;
	}

	@RequestMapping(value = "/editRegistration", method = RequestMethod.POST)
	public String editRegistrationSubmit(
			@ModelAttribute("customerForm") CustomerForm customerForm) {
		System.out.println("Inside edit registration post");
		bankCustomerService.updateCustomer(customerForm);
		return "redirect:bank/customerInformation";
	}

	@RequestMapping(value = "/findPhotoById", method = RequestMethod.GET)
	public void findPhotoById(@RequestParam("userId") String userId,
			HttpServletResponse response) throws IOException {

		response.setContentType("image/jpg");
		byte[] photo = bankCustomerService.findPhotoById(userId);
		System.out.println("Inside find photo by id");
		if (photo != null) {
			System.out.println("found photo");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(photo);
			outputStream.flush();
		}
	}

	@RequestMapping(value = "customerInformation", method = RequestMethod.GET)
	public String showCustomerInformation(Model model) {

		List<CustomerForm> customerDetailList = bankCustomerService
				.findCustomers();
		System.out.println(customerDetailList);
		model.addAttribute("customerList", customerDetailList);
		return NavigationConstant.ADMIN_PAGE
				+ NavigationConstant.CUSTOMER_INFORMATION;
	}

	@RequestMapping(value = "deleteCustomer", method = RequestMethod.GET)
	public String deleteCustomerbyId(@RequestParam("userId") String UserId) {
		bankCustomerService.deleteCustomerById(UserId);
		return "bank/customerInformation";
	}

	@RequestMapping(value = "searchCustomerInformation", method = RequestMethod.GET)
	public String searchCustomerbyAttributeAndValue(
			@RequestParam("searchAttr") String attribute,
			@RequestParam("searchValue") String value, Model model) {
		List<CustomerForm> customerDetailList = bankCustomerService
				.findCustomersByAttributeAndValue(attribute, value);
		model.addAttribute("customerList", customerDetailList);
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.CUSTOMER_INFORMATION;
	}

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		// to actually be able to convert Multipart instance to byte[]
		// we have to register a custom editor
		binder.registerCustomEditor(byte[].class,
				new ByteArrayMultipartFileEditor());
		// now Spring knows how to handle multipart object and convert them
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/DD/YYYY");
		// Create a new CustomDateEditor
		CustomDateEditor editor = new CustomDateEditor(dateFormat, true);
		// Register it as custom editor for the Date type
		binder.registerCustomEditor(Date.class, editor);
	}

	@RequestMapping(value = "selectPayee", method = RequestMethod.GET)
	public String selectPayee(Model model) {

		// bankCustomerService.selectPayee(accno);
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.FUND_TRANSFER_PAGE;
	}

	@RequestMapping(value = "makePayments", method = RequestMethod.GET)
	public String makePayment(Model model) {

		// bankCustomerService.selectPayee(accno);
		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.MAKE_PAYMENT_PAGE;
	}

	@RequestMapping(value = "accountSummary", method = RequestMethod.GET)
	public String showAccountByUserId(Model model) {
		String userId = "aaa111";
		List<CustomerAccountForm> customerAccountForms = customerAccountService
				.findCustomerAccountByUserId(userId);
		model.addAttribute("customerAccountForms", customerAccountForms);

		double totalDeposit = 0;
		double totalLiability = 0;
		Date latestModifyDate = new Date(1900, 1, 1);

		for (int i = 0; i < customerAccountForms.size(); i++) {
			double amt = customerAccountForms.get(i).getAvailBalance();
			if (amt > 0)
				totalDeposit += amt;
			else
				totalLiability += amt;

			if (customerAccountForms.get(i).getDom().after(latestModifyDate))
				latestModifyDate = customerAccountForms.get(i).getDom();
		}

		model.addAttribute("totalDeposit", totalDeposit);
		model.addAttribute("totalLiability", totalLiability);
		model.addAttribute("totalAsset", totalDeposit + totalLiability);
		model.addAttribute("statusOf", latestModifyDate);

		return NavigationConstant.CUSTOMER_PAGE
				+ NavigationConstant.CUSTOMER_ACCOUNT_SUMMARY;
	}

}
